// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.Commands.driveCommand;
import frc.robot.POM_lib.Joysticks.PomXboxController;
import frc.robot.Subsystems.GroundCollect_yanir.GroundCollectSubsystem;
import frc.robot.Subsystems.drive.Drive;
import frc.robot.Subsystems.shooter_yanir.shooterSubsystem;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();
  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();
  
  private final PomXboxController driverController = new PomXboxController(0);
  private final PomXboxController operatorController = new PomXboxController(1);
  // private final Shooter shooter;
  // private final Drive drive;
  private final shooterSubsystem shooterSubsystem;
  private final GroundCollectSubsystem groundCollectSubsystem;
   //private Transfer transfer;
  // private NoteIntake noteIntake;
  private final Drive driveSubSystem;
  
  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
  
    //noteIntake = new NoteIntake(new NoteIntakeIOReal());
    //shooter  = new Shooter(new ShooterIOReal());
    //drive = new Drive(new DriveIOTalonSRX(), null);
   // transfer = new Transfer(new TransferIOReal());
    shooterSubsystem = new shooterSubsystem();
    groundCollectSubsystem = new GroundCollectSubsystem(0.2);
    SmartDashboard.putData("Auto Mode", m_chooser);
    driveSubSystem = new Drive();
    
    configureButtonBindings();
    
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // operatorController.rightTrigger().whileTrue(ShooterCommands.startEndShoot(shooter, ShooterConstants.SPEED));
    // operatorController.leftTrigger().whileTrue(TransferCommands.shoot(transfer));
    // drive.setDefaultCommand(DriveCommands.arcadeDrive(drive, driverController::getLeftY, driverController::getRightX));
    // operatorController.a().onTrue(NoteIntakeCommands.Intake(noteIntake).alongWith(TransferCommands.transfer(transfer)).until(()-> transfer.getTransferSensor()));
    // operatorController.y().onTrue(TransferCommands.stop(transfer).alongWith(NoteIntakeCommands.stop(noteIntake)));
    // //operatorController.a().onFalse(TransferCommands.reverseTransfer(transfer).withTimeout(0.25555));
    //operatorController.x().onTrue(new shooterCommand(shooterSubsystem, 2));
   //operatorController.x().onFalse(new shooterCommand(shooterSubsystem, 0));
    //operatorController.a().whileTrue(new GroundCollectCommand(0.6, groundCollectSubsystem));
     //operatorController.a().whileFalse(new GroundCollectCommand(0, groundCollectSubsystem));
    
    //driveSubSystem.setDefaultCommand(new driveCommand(driveSubSystem, 0.3, 0.3));

    double globalPrecentage_yanir = 0.3;
    driverController.PovUp().whileTrue(new driveCommand(driveSubSystem, -globalPrecentage_yanir, -globalPrecentage_yanir));
    driverController.PovDown().whileTrue(new driveCommand(driveSubSystem, globalPrecentage_yanir, globalPrecentage_yanir));
    driverController.PovLeft().whileTrue(new driveCommand(driveSubSystem, globalPrecentage_yanir, -globalPrecentage_yanir));
    driverController.PovRight().whileTrue(new driveCommand(driveSubSystem, -globalPrecentage_yanir, globalPrecentage_yanir));



  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * 
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}
